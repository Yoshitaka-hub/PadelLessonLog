//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 12 storyboards.
  struct storyboard {
    /// Storyboard `AddNewImage`.
    static let addNewImage = _R.storyboard.addNewImage()
    /// Storyboard `ColorTable`.
    static let colorTable = _R.storyboard.colorTable()
    /// Storyboard `Detail`.
    static let detail = _R.storyboard.detail()
    /// Storyboard `ImageView`.
    static let imageView = _R.storyboard.imageView()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LessonData`.
    static let lessonData = _R.storyboard.lessonData()
    /// Storyboard `LessonImage`.
    static let lessonImage = _R.storyboard.lessonImage()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `NewLesson`.
    static let newLesson = _R.storyboard.newLesson()
    /// Storyboard `ObjectTable`.
    static let objectTable = _R.storyboard.objectTable()
    /// Storyboard `PadelAR`.
    static let padelAR = _R.storyboard.padelAR()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "AddNewImage", bundle: ...)`
    static func addNewImage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.addNewImage)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ColorTable", bundle: ...)`
    static func colorTable(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.colorTable)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Detail", bundle: ...)`
    static func detail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.detail)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ImageView", bundle: ...)`
    static func imageView(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.imageView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LessonData", bundle: ...)`
    static func lessonData(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lessonData)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LessonImage", bundle: ...)`
    static func lessonImage(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lessonImage)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "NewLesson", bundle: ...)`
    static func newLesson(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.newLesson)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ObjectTable", bundle: ...)`
    static func objectTable(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.objectTable)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "PadelAR", bundle: ...)`
    static func padelAR(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.padelAR)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 4 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `colorButtonOff`.
    static let colorButtonOff = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorButtonOff")
    /// Color `colorButtonOn`.
    static let colorButtonOn = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorButtonOn")
    /// Color `colorNavBarButton`.
    static let colorNavBarButton = Rswift.ColorResource(bundle: R.hostingBundle, name: "colorNavBarButton")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "colorButtonOff", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorButtonOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorButtonOff, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "colorButtonOn", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorButtonOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorButtonOn, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "colorNavBarButton", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func colorNavBarButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.colorNavBarButton, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "colorButtonOff", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorButtonOff(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorButtonOff.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "colorButtonOn", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorButtonOn(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorButtonOn.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "colorNavBarButton", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func colorNavBarButton(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.colorNavBarButton.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperIcloudContainerIdentifiers {
      static let iCloudPadeLogCoreDataCloud = infoPlistString(path: ["com.apple.developer.icloud-container-identifiers"], key: "iCloud.PadeLogCoreDataCloud") ?? "iCloud.PadeLogCoreDataCloud"

      fileprivate init() {}
    }

    struct comAppleDeveloperIcloudServices {
      static let cloudKit = infoPlistString(path: ["com.apple.developer.icloud-services"], key: "CloudKit") ?? "CloudKit"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `art.scnassets`.
    static let artScnassets = Rswift.FileResource(bundle: R.hostingBundle, name: "art", pathExtension: "scnassets")

    /// `bundle.url(forResource: "art", withExtension: "scnassets")`
    static func artScnassets(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.artScnassets
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 11 images.
  struct image {
    /// Image `img_ball_black`.
    static let img_ball_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_ball_black")
    /// Image `img_ball_blue`.
    static let img_ball_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_ball_blue")
    /// Image `img_ball_red`.
    static let img_ball_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_ball_red")
    /// Image `img_ball_yellow`.
    static let img_ball_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_ball_yellow")
    /// Image `img_court`.
    static let img_court = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_court")
    /// Image `img_no_court`.
    static let img_no_court = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_no_court")
    /// Image `img_padeLog`.
    static let img_padeLog = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_padeLog")
    /// Image `img_pin_black`.
    static let img_pin_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_pin_black")
    /// Image `img_pin_blue`.
    static let img_pin_blue = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_pin_blue")
    /// Image `img_pin_red`.
    static let img_pin_red = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_pin_red")
    /// Image `img_pin_yellow`.
    static let img_pin_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "img_pin_yellow")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_ball_black", bundle: ..., traitCollection: ...)`
    static func img_ball_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_ball_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_ball_blue", bundle: ..., traitCollection: ...)`
    static func img_ball_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_ball_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_ball_red", bundle: ..., traitCollection: ...)`
    static func img_ball_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_ball_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_ball_yellow", bundle: ..., traitCollection: ...)`
    static func img_ball_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_ball_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_court", bundle: ..., traitCollection: ...)`
    static func img_court(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_court, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_no_court", bundle: ..., traitCollection: ...)`
    static func img_no_court(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_no_court, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_padeLog", bundle: ..., traitCollection: ...)`
    static func img_padeLog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_padeLog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_pin_black", bundle: ..., traitCollection: ...)`
    static func img_pin_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_pin_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_pin_blue", bundle: ..., traitCollection: ...)`
    static func img_pin_blue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_pin_blue, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_pin_red", bundle: ..., traitCollection: ...)`
    static func img_pin_red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_pin_red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "img_pin_yellow", bundle: ..., traitCollection: ...)`
    static func img_pin_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.img_pin_yellow, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `DataTableViewCell`.
    static let dataTableViewCell = _R.nib._DataTableViewCell()
    /// Nib `ImageCollectionViewCell`.
    static let imageCollectionViewCell = _R.nib._ImageCollectionViewCell()
    /// Nib `StepTableViewCell`.
    static let stepTableViewCell = _R.nib._StepTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DataTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dataTableViewCell) instead")
    static func dataTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dataTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImageCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imageCollectionViewCell) instead")
    static func imageCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imageCollectionViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StepTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.stepTableViewCell) instead")
    static func stepTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.stepTableViewCell)
    }
    #endif

    static func dataTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DataTableViewCell? {
      return R.nib.dataTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DataTableViewCell
    }

    static func imageCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCollectionViewCell? {
      return R.nib.imageCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCollectionViewCell
    }

    static func stepTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StepTableViewCell? {
      return R.nib.stepTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StepTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DetailCell`.
    static let detailCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "DetailCell")
    /// Reuse identifier `StepTableViewCellIdentifier`.
    static let stepTableViewCellIdentifier: Rswift.ReuseIdentifier<StepTableViewCell> = Rswift.ReuseIdentifier(identifier: "StepTableViewCellIdentifier")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 26 localization keys.
    struct localizable {
      /// ja translation: アプリ詳細
      ///
      /// Locales: ja
      static let aboutapplicatioN = Rswift.StringResource(key: "ABOUT APPLICATION", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: イメージ
      ///
      /// Locales: ja
      static let image = Rswift.StringResource(key: "Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: イメージ
      ///
      /// Locales: ja
      static let imageView = Rswift.StringResource(key: "Image View", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: イメージを削除しました
      ///
      /// Locales: ja
      static let imageDeleted = Rswift.StringResource(key: "Image deleted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: イメージを削除しますか？
      ///
      /// Locales: ja
      static let areYouSure = Rswift.StringResource(key: "Are you sure?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: キャンセル
      ///
      /// Locales: ja
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ステップ
      ///
      /// Locales: ja
      static let steps = Rswift.StringResource(key: "Steps", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: タイトル
      ///
      /// Locales: ja
      static let title = Rswift.StringResource(key: "Title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: タイトルが空欄です
      ///
      /// Locales: ja
      static let theTitleIsBlank = Rswift.StringResource(key: "The title is blank", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: データを保存しました
      ///
      /// Locales: ja
      static let dataSaved = Rswift.StringResource(key: "Data saved", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: データを削除しました
      ///
      /// Locales: ja
      static let dataDeleted = Rswift.StringResource(key: "Data deleted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: データを削除しますか？
      ///
      /// Locales: ja
      static let dataWillBeDeleted = Rswift.StringResource(key: "Data will be deleted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: データ編集
      ///
      /// Locales: ja
      static let editData = Rswift.StringResource(key: "Edit Data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: データ詳細
      ///
      /// Locales: ja
      static let detail = Rswift.StringResource(key: "Detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: バージョン
      ///
      /// Locales: ja
      static let version = Rswift.StringResource(key: "Version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: ライセンス
      ///
      /// Locales: ja
      static let license = Rswift.StringResource(key: "License", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 入力してください
      ///
      /// Locales: ja
      static let pleaseEnterATitle = Rswift.StringResource(key: "Please enter a title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 入力文字数が 上限を超えています
      ///
      /// Locales: ja
      static let theNumberOfCharactersIsExceeded = Rswift.StringResource(key: "The number of characters is exceeded", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 削除
      ///
      /// Locales: ja
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 完了
      ///
      /// Locales: ja
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 描画
      ///
      /// Locales: ja
      static let drawView = Rswift.StringResource(key: "Draw View", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 新規データ
      ///
      /// Locales: ja
      static let createNewData = Rswift.StringResource(key: "Create New Data", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 編集
      ///
      /// Locales: ja
      static let editImage = Rswift.StringResource(key: "Edit Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 追加
      ///
      /// Locales: ja
      static let addImage = Rswift.StringResource(key: "Add Image", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 追加
      ///
      /// Locales: ja
      static let addStep = Rswift.StringResource(key: "Add Step", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: 選択削除
      ///
      /// Locales: ja
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ja"], comment: nil)

      /// ja translation: アプリ詳細
      ///
      /// Locales: ja
      static func aboutapplicatioN(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("ABOUT APPLICATION", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "ABOUT APPLICATION"
        }

        return NSLocalizedString("ABOUT APPLICATION", bundle: bundle, comment: "")
      }

      /// ja translation: イメージ
      ///
      /// Locales: ja
      static func image(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image"
        }

        return NSLocalizedString("Image", bundle: bundle, comment: "")
      }

      /// ja translation: イメージ
      ///
      /// Locales: ja
      static func imageView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image View", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image View"
        }

        return NSLocalizedString("Image View", bundle: bundle, comment: "")
      }

      /// ja translation: イメージを削除しました
      ///
      /// Locales: ja
      static func imageDeleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Image deleted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Image deleted"
        }

        return NSLocalizedString("Image deleted", bundle: bundle, comment: "")
      }

      /// ja translation: イメージを削除しますか？
      ///
      /// Locales: ja
      static func areYouSure(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure?"
        }

        return NSLocalizedString("Are you sure?", bundle: bundle, comment: "")
      }

      /// ja translation: キャンセル
      ///
      /// Locales: ja
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// ja translation: ステップ
      ///
      /// Locales: ja
      static func steps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Steps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Steps"
        }

        return NSLocalizedString("Steps", bundle: bundle, comment: "")
      }

      /// ja translation: タイトル
      ///
      /// Locales: ja
      static func title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title"
        }

        return NSLocalizedString("Title", bundle: bundle, comment: "")
      }

      /// ja translation: タイトルが空欄です
      ///
      /// Locales: ja
      static func theTitleIsBlank(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("The title is blank", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The title is blank"
        }

        return NSLocalizedString("The title is blank", bundle: bundle, comment: "")
      }

      /// ja translation: データを保存しました
      ///
      /// Locales: ja
      static func dataSaved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Data saved", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Data saved"
        }

        return NSLocalizedString("Data saved", bundle: bundle, comment: "")
      }

      /// ja translation: データを削除しました
      ///
      /// Locales: ja
      static func dataDeleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Data deleted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Data deleted"
        }

        return NSLocalizedString("Data deleted", bundle: bundle, comment: "")
      }

      /// ja translation: データを削除しますか？
      ///
      /// Locales: ja
      static func dataWillBeDeleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Data will be deleted", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Data will be deleted"
        }

        return NSLocalizedString("Data will be deleted", bundle: bundle, comment: "")
      }

      /// ja translation: データ編集
      ///
      /// Locales: ja
      static func editData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Data"
        }

        return NSLocalizedString("Edit Data", bundle: bundle, comment: "")
      }

      /// ja translation: データ詳細
      ///
      /// Locales: ja
      static func detail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Detail"
        }

        return NSLocalizedString("Detail", bundle: bundle, comment: "")
      }

      /// ja translation: バージョン
      ///
      /// Locales: ja
      static func version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Version", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Version"
        }

        return NSLocalizedString("Version", bundle: bundle, comment: "")
      }

      /// ja translation: ライセンス
      ///
      /// Locales: ja
      static func license(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("License", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "License"
        }

        return NSLocalizedString("License", bundle: bundle, comment: "")
      }

      /// ja translation: 入力してください
      ///
      /// Locales: ja
      static func pleaseEnterATitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Please enter a title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Please enter a title"
        }

        return NSLocalizedString("Please enter a title", bundle: bundle, comment: "")
      }

      /// ja translation: 入力文字数が 上限を超えています
      ///
      /// Locales: ja
      static func theNumberOfCharactersIsExceeded(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("The number of characters is exceeded", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "The number of characters is exceeded"
        }

        return NSLocalizedString("The number of characters is exceeded", bundle: bundle, comment: "")
      }

      /// ja translation: 削除
      ///
      /// Locales: ja
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete"
        }

        return NSLocalizedString("Delete", bundle: bundle, comment: "")
      }

      /// ja translation: 完了
      ///
      /// Locales: ja
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// ja translation: 描画
      ///
      /// Locales: ja
      static func drawView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Draw View", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Draw View"
        }

        return NSLocalizedString("Draw View", bundle: bundle, comment: "")
      }

      /// ja translation: 新規データ
      ///
      /// Locales: ja
      static func createNewData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create New Data", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create New Data"
        }

        return NSLocalizedString("Create New Data", bundle: bundle, comment: "")
      }

      /// ja translation: 編集
      ///
      /// Locales: ja
      static func editImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Image"
        }

        return NSLocalizedString("Edit Image", bundle: bundle, comment: "")
      }

      /// ja translation: 追加
      ///
      /// Locales: ja
      static func addImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Image"
        }

        return NSLocalizedString("Add Image", bundle: bundle, comment: "")
      }

      /// ja translation: 追加
      ///
      /// Locales: ja
      static func addStep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add Step", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add Step"
        }

        return NSLocalizedString("Add Step", bundle: bundle, comment: "")
      }

      /// ja translation: 選択削除
      ///
      /// Locales: ja
      static func edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit"
        }

        return NSLocalizedString("Edit", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _DataTableViewCell.validate()
      try _ImageCollectionViewCell.validate()
    }

    struct _DataTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "DataTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> DataTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DataTableViewCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'star' is used in nib 'DataTableViewCell', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "star.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'star.fill' is used in nib 'DataTableViewCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _ImageCollectionViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ImageCollectionViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ImageCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ImageCollectionViewCell
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "doc") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'doc' is used in nib 'ImageCollectionViewCell', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _StepTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = StepTableViewCell

      let bundle = R.hostingBundle
      let identifier = "StepTableViewCellIdentifier"
      let name = "StepTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> StepTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StepTableViewCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try addNewImage.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try colorTable.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try detail.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try imageView.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try lessonData.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try lessonImage.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try newLesson.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try objectTable.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try padelAR.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try setting.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct addNewImage: Rswift.StoryboardResourceType, Rswift.Validatable {
      let addNewImage = StoryboardViewControllerResource<AddNewImageViewController>(identifier: "AddNewImage")
      let bundle = R.hostingBundle
      let name = "AddNewImage"

      func addNewImage(_: Void = ()) -> AddNewImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addNewImage)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.addNewImage().addNewImage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addNewImage' could not be loaded from storyboard 'AddNewImage' as 'AddNewImageViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct colorTable: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ColorTableViewController

      let bundle = R.hostingBundle
      let colorTable = StoryboardViewControllerResource<ColorTableViewController>(identifier: "ColorTable")
      let name = "ColorTable"

      func colorTable(_: Void = ()) -> ColorTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: colorTable)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "paintpalette") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'paintpalette' is used in storyboard 'ColorTable', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "paintpalette.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'paintpalette.fill' is used in storyboard 'ColorTable', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.colorTable().colorTable() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'colorTable' could not be loaded from storyboard 'ColorTable' as 'ColorTableViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct detail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = DetailViewController

      let bundle = R.hostingBundle
      let detail = StoryboardViewControllerResource<DetailViewController>(identifier: "Detail")
      let name = "Detail"

      func detail(_: Void = ()) -> DetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: detail)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "doc") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'doc' is used in storyboard 'Detail', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "photo") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'photo' is used in storyboard 'Detail', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorButtonOn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorButtonOn' is used in storyboard 'Detail', but couldn't be loaded.") }
        }
        if _R.storyboard.detail().detail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'detail' could not be loaded from storyboard 'Detail' as 'DetailViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct imageView: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ImageViewController

      let bundle = R.hostingBundle
      let imageView = StoryboardViewControllerResource<ImageViewController>(identifier: "ImageView")
      let name = "ImageView"

      func imageView(_: Void = ()) -> ImageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: imageView)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.imageView().imageView() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'imageView' could not be loaded from storyboard 'ImageView' as 'ImageViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "img_padeLog", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'img_padeLog' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct lessonData: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LessonDataViewController

      let bundle = R.hostingBundle
      let name = "LessonData"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chart.bar.doc.horizontal") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'chart.bar.doc.horizontal' is used in storyboard 'LessonData', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "rectangle.and.text.magnifyingglass") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'rectangle.and.text.magnifyingglass' is used in storyboard 'LessonData', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "colorButtonOff", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorButtonOff' is used in storyboard 'LessonData', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct lessonImage: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LessonImageViewController

      let bundle = R.hostingBundle
      let name = "LessonImage"

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "info.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'info.circle' is used in storyboard 'LessonImage', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "photo.on.rectangle.angled") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'photo.on.rectangle.angled' is used in storyboard 'LessonImage', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "view.3d") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'view.3d' is used in storyboard 'LessonImage', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in storyboard 'LessonImage', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorButtonOn", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorButtonOn' is used in storyboard 'LessonImage', but couldn't be loaded.") }
          if UIKit.UIColor(named: "colorNavBarButton", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'colorNavBarButton' is used in storyboard 'LessonImage', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct newLesson: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NewLessonViewController

      let bundle = R.hostingBundle
      let name = "NewLesson"
      let newLesson = StoryboardViewControllerResource<NewLessonViewController>(identifier: "NewLesson")

      func newLesson(_: Void = ()) -> NewLessonViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: newLesson)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.newLesson().newLesson() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'newLesson' could not be loaded from storyboard 'NewLesson' as 'NewLessonViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct objectTable: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ObjectTableViewController

      let bundle = R.hostingBundle
      let name = "ObjectTable"
      let objectTable = StoryboardViewControllerResource<ObjectTableViewController>(identifier: "ObjectTable")

      func objectTable(_: Void = ()) -> ObjectTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: objectTable)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrow.up.right") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrow.up.right' is used in storyboard 'ObjectTable', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "b.circle.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'b.circle.fill' is used in storyboard 'ObjectTable', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eyedropper.full") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'eyedropper.full' is used in storyboard 'ObjectTable', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "line.diagonal") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'line.diagonal' is used in storyboard 'ObjectTable', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "pin.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'pin.fill' is used in storyboard 'ObjectTable', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "scribble.variable") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'scribble.variable' is used in storyboard 'ObjectTable', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "square.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'square.fill' is used in storyboard 'ObjectTable', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.objectTable().objectTable() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'objectTable' could not be loaded from storyboard 'ObjectTable' as 'ObjectTableViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct padelAR: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = PadelARViewController

      let bundle = R.hostingBundle
      let name = "PadelAR"
      let padelAR = StoryboardViewControllerResource<PadelARViewController>(identifier: "PadelAR")

      func padelAR(_: Void = ()) -> PadelARViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: padelAR)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "b.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'b.circle' is used in storyboard 'PadelAR', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "mount") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'mount' is used in storyboard 'PadelAR', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "pin") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'pin' is used in storyboard 'PadelAR', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.padelAR().padelAR() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'padelAR' could not be loaded from storyboard 'PadelAR' as 'PadelARViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct setting: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SettingTableViewController

      let bundle = R.hostingBundle
      let name = "Setting"
      let setting = StoryboardViewControllerResource<SettingTableViewController>(identifier: "Setting")

      func setting(_: Void = ()) -> SettingTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: setting)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.setting().setting() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'setting' could not be loaded from storyboard 'Setting' as 'SettingTableViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
